/* vim: set ft=devicetree: */

/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/mouse.h>

&mmv {
  time-to-max-speed-ms = <500>;
};
&mwh {
  acceleration-exponent=<1>;
};
/ {
        behaviors {
          tdr: tap_dance_r {
                 compatible = "zmk,behavior-tap-dance";
                 label = "TAP_DANCE_RESET";
                 #binding-cells = <0>;
                 tapping-term-ms = <200>;
                 bindings = <___>, <&sys_reset>, <&bootloader>;
               };
          tdc: tap_dance_ctl {
                 compatible = "zmk,behavior-tap-dance";
                 label = "TAP_DANCE_LCTL";
                 #binding-cells = <0>;
                 tapping-term-ms = <200>;
                 bindings = <&kp LCTL>, <&kp LGUI>, <&kp LC(LGUI)>;
               };
          tda: tap_dance_alt {
                 compatible = "zmk,behavior-tap-dance";
                 label = "TAP_DANCE_LALT";
                 #binding-cells = <0>;
                 tapping-term-ms = <200>;
                 bindings = <&kp LALT>, <&kp LGUI>, <&kp LA(LGUI)>;
               };
          tds: tap_dance_shf {
                 compatible = "zmk,behavior-tap-dance";
                 label = "TAP_DANCE_LSHFT";
                 #binding-cells = <0>;
                 tapping-term-ms = <200>;
                 bindings = <&kp LSHFT>, <&kp LALT>, <&kp LS(LA(LGUI))>;
               };
          td0: tap_dance_0 {
                 compatible = "zmk,behavior-tap-dance";
                 label = "TAP_DANCE_MOUSE";
                 #binding-cells = <0>;
                 tapping-term-ms = <200>;
                 bindings = <&mo 1>, <&mo 4>, <&tog 4>;
               };
          pht: positional_hold_tap {
              compatible = "zmk,behavior-hold-tap";
              label = "POSITIONAL_HOLD_TAP";
              #binding-cells = <2>;
              flavor = "balanced";
              tapping-term-ms = <200>;                            // <---[[produces tap if held longer than tapping-term-ms]]
              quick-tap-ms = <200>;
              bindings = <&kp>, <&kp>;
              hold-trigger-key-positions = <12 13 14 15 16 17 18 19 20 21 22 23>;   // <---[[home row keys]]
          };
        };
        keymap {
                compatible = "zmk,keymap";

                // mo0
                default_layer {

                        label = "default";
                        bindings = <
 // ,-----------------------------------------------------------------.           ,-----------------------------------------------------------------.
 // |          |     Q    |     W    |     E    |     R    |     T    |           |     Y    |     U    |     I    |     O    |     P    |          |
 // |----------+----------+----------+----------+----------+----------|           |----------+----------+----------+----------+----------+----------|
 // |    TAPR  |     A    |     S    |     D    |     F    |     G    |           |     H    |     J    |     K    |     L    |     ;    |          |
 // |----------+----------+----------+----------+----------+----------|           |----------+----------+----------+----------+----------+----------|
 // |          |     Z    |     X    |     C    |     V    |     B    |           |     N    |     M    |     ,    |     .    |     /    |          |
 // `-----------------------------------------------------------------'           `-----------------------------------------------------------------'
 //                                 ,--------------------------------.           ,----------,---------------------.
 //                                 |   TDC    |   TAP0   |          |           |          |   RAISE  |   TDS    |
 //                                 `---------------------|   Space  |           |  BckSpc  |----------+----------.
 //                                                       |          |           |          |
 //                                                       `----------'           `----------'
                        >;
                };
                // mo1
                lower_layer {
                        label = "lower";
                        bindings = <
 // ,-----------------------------------------------------------------.           ,-----------------------------------------------------------------.
 // |          |     !    |     @    |     #    |     $    |     %    |           |     ^    |     &    |     *    |     (    |     )    |          |
 // |----------+----------+----------+----------+----------+----------|           |----------+----------+----------+----------+----------+----------|
 // |          |    Esc   |          |   MCLK   |   LCLK   |   RCLK   |           |          |     _    |     +    |     {    |     }    |          |
 // |----------+----------+----------+----------+----------+----------|           |----------+----------+----------+----------+----------+----------|
 // |          |    Caps  |     ~    |          |          |          |           |          |          |          |     |    |     "    |          |
 // `-----------------------------------------------------------------'           `-----------------------------------------------------------------'
 //                                 ,--------------------------------.           ,----------,---------------------.
 //                                 |           |  LOWER |           |           |          |   RAISE  |    Del   |
 //                                 `---------------------|          |           |  Enter   |----------+----------.
 //                                                       |          |           |          |
 //                                                       `----------'           `----------'
                        >;
                };
                // mo2
                raise_layer {
                        label = "raise";
                        bindings = <
 // ,-----------------------------------------------------------------.           ,-----------------------------------------------------------------.
 // |          |     1    |     2    |     3    |     4    |     5    |           |     6    |     7    |     8    |     9    |     0    |          |
       ___    &kp N1     &kp N2     &kp N3     &kp N4     &kp N5                 &kp N6     &kp N7     &kp N8     &kp N9     &kp N0       ___
 // |----------+----------+----------+----------+----------+----------|           |----------+----------+----------+----------+----------+----------|
 // |          |    Tab   |          |          |          |          |           |          |     -    |     =    |     [    |     ]    |          |
       ___    &kp TAB   &kp LEFT   &kp DOWN   &kp UP     &kp RIGHT                 ___    &kp MINUS  &kp EQUAL  &kp LBKT   &kp RBKT     ___
 // |----------+----------+----------+----------+----------+----------|           |----------+----------+----------+----------+----------+----------|
 // |          |          |     `    |          |          |          |           |          |          |          |     \    |     '    |          |
       ___      ___    &kp GRAVE    ___      ___      ___                  ___      ___      ___    &kp BSLH    &kp SQT ___
 // `-----------------------------------------------------------------'           `-----------------------------------------------------------------'
 //                                 ,--------------------------------.           ,----------,---------------------.
 //                                 |           |         |          |           |          |          |          |
 //                                 `---------------------|          |           |          |----------+----------.
                                       ___      ___       ___                 ___        ___    ___
 //                                                       |          |           |          |
 //                                                       `----------'           `----------'
                        >;
                };
                // mo3
                func_layer {

                        label = "func";
                        bindings = <
 // ,-----------------------------------------------------------------.           ,-----------------------------------------------------------------.
 // |          |    F1    |    F2    |    F3    |    F4    |    F5    |           |    F6    |    F7    |    F8    |    F9    |    F0    |          |
      ___     &kp F1     &kp F2     &kp F3     &kp F4     &kp F5                 &kp F6     &kp F7     &kp F8     &kp F9     &kp F10     ___
 // |----------+----------+----------+----------+----------+----------|           |----------+----------+----------+----------+----------+----------|
 // |          |    F11   |    F12   |          |          |          |           |          |          |          |          |          |          |
      ___     &kp F11    &kp F12      ___     ___      ___                  ___      ___      ___      ___      ___      ___
 // |----------+----------+----------+----------+----------+----------|           |----------+----------+----------+----------+----------+----------|
 // |          |          |          |          |          |          |           |          |          |          |          |          |          |
      ___       ___     ___       ___     ___      ___                  ___      ___     ___      ___      ___      ___
 // `-----------------------------------------------------------------'           `-----------------------------------------------------------------'
 //                                 ,--------------------------------.           ,----------,---------------------.
 //                                 |           |         |          |           |          |          |          |
 //                                 `---------------------|          |           |          |----------+----------.
                                      ___       ___      ___                  ___      ___      ___
 //                                                       |          |           |          |
 //                                                       `----------'           `----------'
                        >;
                };
                // mo4
                mouse_layer {
                        label = "mouse";
                        bindings = <
 // ,-----------------------------------------------------------------.           ,-----------------------------------------------------------------.
 // |          |          |   MUP    |          |   MCLK   |   SCDWN  |           |          |          |          |          |          |          |
      ___      ___    &mmv MOVE_UP  ___    &mkp MCLK &mwh SCROLL_DOWN         ___      ___      ___      ___      ___      ___
 // |----------+----------+----------+----------+----------+----------|           |----------+----------+----------+----------+----------+----------|
 // |          |   MLFT   |   MDWN   |   MRHT   |   LCLK   |   SCUP   |           |          |          |          |          |          |          |
    ___ &mmv MOVE_LEFT &mmv MOVE_DOWN &mmv MOVE_RIGHT &mkp LCLK &mwh SCROLL_UP    ___      ___      ___      ___      ___      ___
 // |----------+----------+----------+----------+----------+----------|           |----------+----------+----------+----------+----------+----------|
 // |          |          |          |          |   RCLK   |          |           |          |          |          |          |          |          |
      ___      ___      ___      ___   &mkp RCLK     ___                  ___      ___      ___      ___      ___      ___
 // `-----------------------------------------------------------------'           `-----------------------------------------------------------------'
 //                                 ,--------------------------------.           ,----------,---------------------.
 //                                 |           |         |          |           |          |          |          |
 //                                 `---------------------|          |           |          |----------+----------.
                                      ___       &td0       ___                 ___      ___      ___
 //                                                       |          |           |          |
 //                                                       `----------'           `----------'
                        >;
                };
        };
};
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>

#include "../zmk-nodefree-config/helper.h"
#include "../zmk-nodefree-config/keypos_def/keypos_36keys.h"
#include "../zmk-nodefree-config/international_chars/german.dtsi"

/* layer and key shortcuts */

#define ___ &trans

#define DEF 0  // layer shortcuts, must match order in which they are defined below
#define LOW 1
#define NUM 2
#define GER 3

//#include "combos.dtsi"  // requires layer aliases
#include "mouse.dtsi"
#include "extra_keys.h"

// homerow mods
ZMK_BEHAVIOR(hrm, hold_tap,
    flavor = "balanced";
    tapping-term-ms = <280>;
    quick-tap-ms = <125>;
    global-quick-tap;
    bindings = <&kp>, <&kp>;
)

// tap: sticky shift | double tap: capsword
ZMK_BEHAVIOR(ss_cw, tap_dance,
    tapping-term-ms = <200>;
    bindings = <&sk LSHFT>, <&caps_word>;
)

// tap: backspace | shift + tap: delete | hold: num layer
ZMK_BEHAVIOR(bs_del_num, mod_morph,
    bindings = <&lt NUM BSPC>, <&kp DEL>;
    mods = <(MOD_LSFT|MOD_RSFT)>;
)

// windows sleep macro
ZMK_BEHAVIOR(win_sleep, macro,
    wait-ms = <100>;
    tap-ms = <5>;
    bindings = <&kp LG(X) &kp U &kp S>;
)

// euro sign
ZMK_UNICODE_SINGLE(euro_sign, N2, N0, A, C)  // €

// replace a/o/u/s with German umlauts when LOW and NUM are held jointly
ZMK_CONDITIONAL_LAYER(LOW NUM, GER)

// combos
//#undef COMBO_TERM
//#define COMBO_TERM 40  // timeout of 40ms (default is 30ms if omitted)
//ZMK_COMBO(combo_sleep,  &win_sleep, RT3 RT4, LOW)  // custom sleep macro, only active on LOW layer
//ZMK_COMBO(combo_copy,   &kp LC(C),  LB2 LB3, ALL)  // Ctrl + C, active on all layers
//ZMK_COMBO(combo_paste,  &kp LC(V),  LB1 LB2, ALL)  // Ctrl + V, active on all layers

/* keymap */

ZMK_LAYER(default_layer,
     // ╭─────────────┬─────────────┬─────────────┬─────────────┬─────────────╮   ╭─────────────┬─────────────┬─────────────┬─────────────┬─────────────╮
          &kp Q         &kp W         &kp E         &kp R         &kp T             &kp Y         &kp U         &kp I         &kp O         &kp P
     // ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤   ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤
          &hrm LGUI A   &hrm LALT S   &hrm LCTRL D  &hrm LSHFT F  &kp G             &kp H         &hrm RSHFT J  &hrm LCTRL K  &hrm LALT L   &hrm LGUI SEMI
     // ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤   ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤
          &kp Z         &kp X         &kp C         &kp V         &kp B             &kp N         &kp M         &kp COMMA     &kp DOT       &kp FSLH
     // ╰─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤   ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤
                                      &kp LCTRL     &mo 1         &kp SPACE         &kp BSPC      &mo 2        &ss_cw
     //                             ╰─────────────┴─────────────┴─────────────╯   ╰─────────────┴─────────────┴─────────────╯
)

ZMK_LAYER(low_layer,
     // ╭─────────────┬─────────────┬─────────────┬─────────────┬─────────────╮   ╭─────────────┬─────────────┬─────────────┬─────────────┬─────────────╮
          &kp EXCL      &kp AT        &kp HASH      &kp DLLR      &kp PRCNT         &kp CARET     &kp AMPS      &kp STAR      &kp LPAR      &kp RPAR
     // ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤   ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤
        &hrm LGUI ESC &hrm LALT ___ &hrm LCTRL U_BTN3 &hrm LSHFT U_BTN1 &kp U_BTN2  &kp H        &hrm RSHFT UNDER &hrm LCTRL PLUS  &hrm LALT LBRC   &hrm LGUI RBRC
     // ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤   ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤
          &kp CAPS      &kp TILDE     ___           ___           ___               ___           ___           ___           &kp PIPE      &kp DQT
     // ╰─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤   ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤
                                      ___           &mo 1         ___               &kp RET       &mo 3         &kp DEL
     //                             ╰─────────────┴─────────────┴─────────────╯   ╰─────────────┴─────────────┴─────────────╯
)

/*
ZMK_LAYER(nav_layer,
     // ╭─────────────┬─────────────┬─────────────┬─────────────┬─────────────╮   ╭─────────────┬─────────────┬─────────────┬─────────────┬─────────────╮
          ___           ___           ___           ___           ___               &kp PG_UP     &kp HOME      &kp UP        &kp END       &kp INS
     // ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤   ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤
          &sk LGUI      &sk LALT      &sk LCTRL     &sk LSHFT     ___               &kp PG_DN     &kp LEFT      &kp DOWN      &kp RIGHT     &kp DEL
     // ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤   ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤
          ___           ___           ___           ___           ___               ___           &kp LC(X)     &kp LC(INS)   &kp LS(INS)   ___
     // ╰─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤   ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤
                                      ___           ___           ___               ___           ___           ___
     //                             ╰─────────────┴─────────────┴─────────────╯   ╰─────────────┴─────────────┴─────────────╯
)
*/

ZMK_LAYER(num_layer,
     // ╭─────────────┬─────────────┬─────────────┬─────────────┬─────────────╮   ╭─────────────┬─────────────┬─────────────┬─────────────┬─────────────╮
          &kp ESC       &kp N7        &kp N8        &kp N9        &kp STAR          ___           ___           ___           ___           ___
     // ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤   ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤
          &kp TAB       &kp N4        &kp N5        &kp N6        &kp PLUS          ___           &sk RSHFT     &sk LCTRL     &sk LALT      &sk LGUI
     // ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤   ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤
          &kp RET       &kp N1        &kp N2        &kp N3        &kp FSLH          ___           ___           ___           ___           ___
     // ╰─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤   ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤
                                      &kp DOT       &kp N0        &kp MINUS         ___           ___           ___
     //                             ╰─────────────┴─────────────┴─────────────╯   ╰─────────────┴─────────────┴─────────────╯
)

ZMK_LAYER(german_layer,
     // ╭─────────────┬─────────────┬─────────────┬─────────────┬─────────────╮   ╭─────────────┬─────────────┬─────────────┬─────────────┬─────────────╮
          ___           ___           ___           ___           ___               ___           ___           &de_ue        ___           ___
     // ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤   ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤
          &de_ae        ___           &de_eszett    ___           ___               ___           ___           &euro_sign    ___           &de_oe
     // ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤   ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤
          ___           ___           ___           ___           ___               ___           ___           ___           ___           ___
     // ╰─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤   ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤
                                      ___           ___           ___               ___           ___           ___
     //                             ╰─────────────┴─────────────┴─────────────╯   ╰─────────────┴─────────────┴─────────────╯
)

